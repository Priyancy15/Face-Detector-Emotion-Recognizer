# -*- coding: utf-8 -*-
"""Face_Recognition_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPtqb_AjxHgh-ifn7n3amhOZkmLBiODO
"""

from google.colab import files
import cv2

!apt-get install -y cmake
!pip install dlib==19.18.0

!pip install face_recognition

!pip install opencv-python-headless

import face_recognition
from google.colab.patches import cv2_imshow

# Upload the video file
uploaded = files.upload()

# Load the video file
video_path = list(uploaded.keys())[0]
video_capture = cv2.VideoCapture(video_path)

# Function to load and encode a known face
def load_known_face(image_path, name):
    known_image = face_recognition.load_image_file(image_path)
    known_face_encoding = face_recognition.face_encodings(known_image)[0]
    return known_face_encoding, name

# Load and encode multiple known faces
known_face_encodings = []
known_face_names = []

# Example of adding known faces manually
# You can modify this part to dynamically add faces based on user input or a predefined list
# For example, using a loop to add multiple faces
num_known_faces = int(input("Enter the number of known faces: "))
for i in range(num_known_faces):
    image_path = input(f"Enter the path for image {i+1}: ")
    name = input(f"Enter the name for person {i+1}: ")
    face_encoding, face_name = load_known_face(image_path, name)
    known_face_encodings.append(face_encoding)
    known_face_names.append(face_name)

# Initialize some variables
face_locations = []
face_encodings = []
face_names = []
process_this_frame = True

while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()

    if not ret:
        break

    # Resize frame of video to 1/4 size for faster face recognition processing
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)

    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
    rgb_small_frame = small_frame[:, :, ::-1]

    # Only process every other frame of video to save time
    if process_this_frame:
        # Find all the faces and face encodings in the current frame of video
        face_locations = face_recognition.face_locations(rgb_small_frame)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        face_names = []
        for face_encoding in face_encodings:
            # See if the face is a match for the known face(s)
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            name = "Unknown"

            # Use the known face with the smallest distance to the new face
            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            best_match_index = face_distances.argmin()
            if matches[best_match_index]:
                name = known_face_names[best_match_index]

            face_names.append(name)

    process_this_frame = not process_this_frame

    # Display the results
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Scale back up face locations since the frame we detected in was scaled to 1/4 size
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)

    # Display the resulting image
    cv2_imshow(frame)

    # Hit 'q' on the keyboard to quit!
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release handle to the video file
video_capture.release()
cv2.destroyAllWindows()